/*
                    OOP
                    │
    ┌───────────────┼────────────────┬─────────────────┐
    │               │                │                 │
    ▼               ▼                ▼                 ▼
    Encapsulation   Abstraction     Inheritance     Polymorphism
    (Protect data)  (Hide details)  (Reuse code)    (Many forms)
    */

/* 
1️⃣ Encapsulation

    Wrapping data and functions into a class and protecting data from direct access.
    example : private --> 


2️⃣ Abstraction

Showing only important details and hiding unnecessary implementation.



3️⃣ Inheritance

One class getting properties and behavior from another class.
example :
class A
{

};

class B : public A
{

};


4️⃣ Polymorphism

Same function performing different actions depending on the object.


class A
{ 
    void func()
    {

    }

};


class B : public A 
{
 void func()
    {
    
    }

};
    */